sessionData$correctResponse <- as.numeric(as.character(sessionData$correctResponse)) #turn correctResponse to numeric
sessionData$value <- as.numeric(as.character(sessionData$value)) #turn string variables into numeric
#General variables ----
medianRT <- median(sessionData$responseTime, na.rm = TRUE)
sdRT <- sd(sessionData$responseTime, na.rm = TRUE)
accuracy <- (sum(sessionData$correctResponse, na.rm = TRUE)/nrow(sessionData))*100
#Reversals ----
a <- sessionData$value
b <- lag(sessionData$value,1)
reversals <- as.data.frame(cbind(b,a))
colnames(reversals) <- c("valueprior", "value")
reversals$valuediff <- reversals$value-reversals$valueprior #value differnece
reversals$valuediffprior <- lead(reversals$valuediff,1)
reversals$sign <- sign(reversals$valuediff)
reversals$signs <- lead(sign(reversals$valuediff),1)
reversals$signs[reversals$signs==0] <- -1
reversals$reversals  <-reversals$sign+reversals$signs
reversals$reversals[reversals$reversals==0] <- "Reversals"
reversals <- length(which(reversals$reversals=="Reversals"))
#Key variables ----
#For the reaction time protocols
if(protocol %in% c("Simple Reaction Time","Choice Reaction Time")){
if(sum(sessionData$correctResponse) >= 6){
correctResponses <- sessionData$responseTime[sessionData$correctResponse==1]
middle <- length(correctResponses)/2
median6 <- correctResponses[(middle-3):(middle+2)]
meanRT <- mean(median6)
} else {
meanRT <- NA}}
#For the tactile threshold protocols
if(protocol %ni% c("Simple Reaction Time","Choice Reaction Time")){
threshold <- mean(sessionData$value[(nrow(sessionData)-4):(nrow(sessionData))])
}
if(protocol %in% c("Dynamic Detection Threshold")){
threshold <- mean(sessionData$value[sessionData$correctResponse==1])
}
#Column bind variables -----
if(protocol %in% c("Simple Reaction Time","Choice Reaction Time")){
outPut <- cbind(accuracy, medianRT, sdRT, meanRT)}else{outPut <- cbind(accuracy, medianRT, sdRT, threshold, reversals)}
#Add a tag to the end of the column names to specify which protocol the outPut is from ----
tag <- ifelse(protocol=="Simple Reaction Time", "_SRT",
ifelse(protocol=="Choice Reaction Time", "_CRT",
ifelse(protocol=="Static Detection Threshold", "_SDT",
ifelse(protocol=="Static Detection Threshold with Adaptation ISI 30", "_SDT30",
ifelse(protocol=="Static Detection Threshold with Adaptation ISI 100", "_SDT100",
ifelse(protocol=="Dynamic Detection Threshold", "_DDT",
ifelse(protocol=="Amplitude Discrimination Threshold without Adaptation", "_ADT",
ifelse(protocol=="Amplitude Discrimination with Single Site Adaptation", "_ADTssa",
ifelse(protocol=="Amplitude Discrimination with Dual Site Adaptation", "_ADTdsa",
ifelse(protocol=="Simultaneous Frequency Discrimination", "_SMFD",
ifelse(protocol=="Sequential Frequency Discrimination", "_SQFD",
ifelse(protocol=="Simultaneous Amplitude Discrimination", "_SMAD",
ifelse(protocol=="Sequential Amplitude Discrimination", "_SQAD",
ifelse(protocol=="Temporal Order Judgement", "_TOJ",
ifelse(protocol=="Temporal Order Judgement with Carrier", "_TOJwc",
ifelse(protocol=="Duration Discrimination", "_DD", NA))))))))))))))))
colnames(outPut) <- paste0(colnames(outPut), tag)
analyzed_protocols_list[[p]] <- outPut
}
participant_output <- do.call(cbind, analyzed_protocols_list)
participant_output <- cbind(participant_details, participant_output)
# participant_output$session <- 1:nrow(participant_output)
return(participant_output)
}
BATD_analyze_all(ARBA1)
#' BATD_analyze_all
#'
#' Analyze the extracted data from "BATD_extract_NF" or "BATD_extract_OF" for multiple participants. This function is practically the same as "BATD_analyze", but applies it to multiple participants within a for loop.
#' Over and above "BATD_analyze", "BATD_analyze_all" also appends information about the participant that completed the protocol, as well as parameters of the protocol itself.
#' For this reason, we recommend users to always use BATD_analyze_all, even for single participants.
#'
#' @param dataframe BATD_analyze all requires the dataframe created by BATD_extract
#'
#' @return like BATD_analyze will return a dataframe with a single row, containing the performance metrics for all the protocols completed by a given participant.
#' However, BATD_analyze_all will return a dataframe with multiple rows, referring to each participant in the dataframe entered, separated by sessions if they completed multiple sessions.
#'
#' @examples
#' Examples are currently NA
#'
#' @export
BATD_analyze_all <- function(dataframe){
uniqueParticipants <- unique(dataframe$id)
uniqueParticipants <- uniqueParticipants[!is.na(uniqueParticipants)]
participants_outPut_list <- list()
participants_detail_list <- list()
for(x in 1:length(uniqueParticipants)){
#subset by participant ----
data <- dataframe[dataframe$id==uniqueParticipants[x],] #Subset to the nth participant
data <- data[!is.na(data$id),] #remove rows where the id is NA (an old fix that I'm afraid to remove)
#subset by sessions ----
sessions <- unique(data$session) #identify the number of sessions
sessions_outPut_list <- list() #create a list to store session data
for(s in 1:length(sessions)){
sessionData <- data[data$session==s,] #Subset to the nth session
sessionData <- sessionData[!is.na(sessionData$id),] #remove rows where the id is NA (an old fix that I'm afraid to remove)
sessions_outPut_list[[s]] <- as.data.frame(BATD_analyze(sessionData))
}
#Combine the output from the sessions_outPut_list
sessionsData_combined <- plyr::rbind.fill(sessions_outPut_list) #combine the sessions output from sessions_outPut_list
sessionsData_combined$sessions <- 1:nrow(sessionsData_combined) #add a column which denotes session (will be based on the number of rows)
participants_outPut_list[[x]] <- sessionsData_combined
}
all <- plyr::rbind.fill(participants_outPut_list)
# all <- cbind(do.call("rbind", replicate(n, alldetails, simplify = FALSE)), allperformance)
# baseDirectory <- getwd()
# dir.create("Combined Data", showWarnings = FALSE)
# setwd(paste0(getwd(),"/Combined Data"))
# write.csv(all, "Vibrotactile_data_combined.csv")
# setwd(baseDirectory)
return(all)
}
#' BATD_extract_NF
#'
#' Takes a list of filenames in a working directory which contain the performance data recorded from Cortical Metrics. These performance files are typically .txt files. "BATD_extract_NF" was specifically designed to analyze data from Brain Gauge devices.
#' For more information about Cortical Metrics Brain Gauage, see: https://www.corticalmetrics.com/braingauge. BATD_extract_NF requires two inputs, with the first being the list of participants and the second being a string variable referring to the site where the data was collected.
#' While both "BATD_extract_NF" and "BATD_extract_OF" return a combined dataframe for all the participants that have had their data extracted, the individual and combined files are saved in folders created in the original working directory.
#' In the working directory, folders 'output' and 'combined' will be created to store the individual files that were extracted and a file containing all the individual files combined respectively. These files are in .csv format.
#'
#' @param list_of_filenames a list object containing the filenames of the .txt files containing participant performance from Brain Gauge
#' @param Site refers to the site where the data was collected. In the past and in the future, the original codes will be patched for different sites. For Site, put the site location inbetween two quotation marks. For e.g., "JHU" refers to the Johns Hopkins University
#'
#' @return BATD_extract_NF returns a dataframe containing the extracted data for each participant. Protocols and protocol names are provided as columns, along with other relevant metrics.
#'
#' @examples
#' currently NA
#'
#' @export
BATD_extract_NF <- function(list_of_filenames, Site){
inputDirectory <- getwd()
dir.create("output", showWarnings = FALSE) #set the wd to the folder where you wish to save the output data to
outputDirectory <- paste0(inputDirectory,"/output") #automatically creates a folder in that directory named 'output' - if you already have a folder named output, ignore this code.
#Create external lists -----
allParticipantsOutput <- list()
#For loop through the participants identified in the inputDirectory ----
for(p in 1:length(list_of_filenames)){
setwd(inputDirectory) #set working directory
output <- read.csv(list_of_filenames[p], header = FALSE) #read in the current participant[p]'s file
#General data cleaning prior to extraction ----
output$V1 <- as.character(output$V1) #turn column 1 into a character
output$V1 <- gsub(" ","",output$V1) #replace all blank spaces in column 1
tempo <- suppressWarnings(t(as.data.frame(strsplit(output$V1,":")))) #split the string by ':' and transpose it to long format
rownames(tempo) <- c() #clear the row numbers
temp <- suppressWarnings(as.data.frame(tempo)) #turn the output into a dataframe
#Break the dataframe up into separate protocols stored in a list ----
#Use "X" to mark the beginning of each protocol
temp$V4 <- ifelse(temp$V1=="date", "X",NA) #All of the files start with date, we will use date as marker of the start of each protocol - create a column which marks date with a 'X'
protocols <- (which(temp$V4=="X")) #This line tells us all of the instances in *which* 'X' occurs
protocols <- as.list(protocols)
list <- list() #Create a list external of the for loop for breaking the output into seperate protocols
for (i in (1:length(protocols))){
if(i==length(protocols)){break} #Note to self, if it's 14, then we want i+1 to be something else (i.e., the end of the file)
list[[i]] <-  temp[(paste(protocols[i])):(paste(protocols[i+1])),]
} #loop for breaking the output into separate protocols
list[[i]] <- temp[(paste(protocols[i])):nrow(temp),] #puts the last protocol into the list (for loop above cannot account for last protocol)
#For loop through the protocols in the protocolsFolder and extract the participant/protocol/performance details ----
ProtocolOutputList <- list()
for (i in (1:length(list))){
output <- list[[i]]
rownames(output) <- c() #clear the row numbers
# (1) Extract Participant details ----
race <- as.character(output$V2[output$V1=="race"])
gender <- as.character(output$V2[output$V1=="gender"])
handedness <- as.character(output$V2[output$V1=="handedness"])
birthYear <- as.character(output$V2[output$V1=="birthYear"])
id <- as.character(output$V2[output$V1=="number"]) #is this participant id?
participantDetails <- as.data.frame(cbind(id, race, gender, handedness, birthYear))
# (2) Extract Protocol Details ----
protocol <- as.character(output$V2[output$V1=="protocol"])
date <- substr(gsub("T","",(output$V2[output$V1=="date"][1])), 1,10)
numberofPracticeTrials <- as.character(output$V2[output$V1=="numTrials"][1])
numberofTestTrials <- as.character(output$V2[output$V1=="numTrials"][2])
stim1amplitude <- as.character(output$V2[output$V1=="amplitude"])[1]
stim2amplitude <- as.character(output$V2[output$V1=="amplitude"])[2]
astim1amplitude <- as.character(output$V2[output$V1=="amplitude"])[3]
astim2amplitude <- as.character(output$V2[output$V1=="amplitude"])[4]
stim1duration <- as.character(output$V2[output$V1=="duration"])[1]
stim2duration <- as.character(output$V2[output$V1=="duration"])[2]
astim1duration <- as.character(output$V2[output$V1=="duration"])[3]
astim2duration <- as.character(output$V2[output$V1=="duration"])[4]
#output$V1[output$V1=="ITI"] <- "ISI" #for the new format, ISI is referred to as ITI
ISI <- suppressWarnings(as.numeric(as.character(output$V2[output$V1=="ITI"][1])))
originalFilename <- list_of_filenames[p]
protocolDetails <- as.data.frame(cbind(protocol, date, numberofPracticeTrials, numberofTestTrials, ISI,
stim1amplitude, stim2amplitude,
astim1amplitude, astim2amplitude,
stim1duration, stim2duration,
astim1duration, astim2duration, originalFilename))
# (3) Extract Performance details ----
value <- as.character(output$V2[output$V1=="value"])
expected <- as.character(output$V2[output$V1=="expected"])
response <- as.character(output$V2[output$V1=="response"])
correctResponse <- as.character(output$V2[output$V1=="correct"])
responseTime <- as.character(output$V2[output$V1=="responseTime"])
performanceDetails <- as.data.frame(cbind(value, expected, response, correctResponse, responseTime))
All <- cbind(protocolDetails, participantDetails, performanceDetails)
All$trialNumber <- 1:nrow(All)
ProtocolOutputList[[i]] <- All
}
participantTactileData <- do.call(rbind.data.frame, ProtocolOutputList)
#Change correctResponse to a 0 or 1 numeric (currently its in true or false, I just want to standardise this between the old and new format, also string descriptions are not useful here)
participantTactileData$correctResponse <- suppressWarnings(as.numeric(participantTactileData$correctResponse)) #make correctResponse numeric, making true = 2, and false = 1
participantTactileData$correctResponse <- participantTactileData$correctResponse - 1 #subtract 1, so that 1 = correct, 0 = incorrecty
#Label protocols with names (note that this is done in a specific order since sometimes protocols share numeric codes ----
#Note, there are far more protocols in the new format than the old format, hence the greater number of protocol numbers
#Simple and Choice Reaction times
participantTactileData$protocolName[participantTactileData$protocol==801] <- "Simple Reaction Time"
participantTactileData$protocolName[participantTactileData$protocol==800] <- "Choice Reaction Time"
#Static Detection Thresholds with and without adaptation (with ISI 30 and 100)
participantTactileData$protocolName[participantTactileData$protocol==900 & participantTactileData$stim1amplitude==0] <- "Static Detection Threshold"
participantTactileData$protocolName[participantTactileData$protocol==100 & participantTactileData$stim1amplitude==0] <- "Static Detection Threshold"
participantTactileData$protocolName[participantTactileData$protocol==910 & participantTactileData$ISI==5000] <- "Static Detection Threshold"
participantTactileData$protocolName[participantTactileData$protocol==910 & participantTactileData$ISI==30] <- "Static Detection Threshold with Adaptation ISI 30"
participantTactileData$protocolName[participantTactileData$protocol==910 & participantTactileData$ISI==100] <- "Static Detection Threshold with Adaptation ISI 100"
#Duration discrimination
participantTactileData$protocolName[participantTactileData$protocol==350] <- "Duration Discrimination"
#Dynamic detection threshold
participantTactileData$protocolName[participantTactileData$protocol==713] <- "Dynamic Detection Threshold"
#Amplitude Discrimination Threshold with and without adaptation (with single site and dual site)
participantTactileData$protocolName[participantTactileData$protocol==900 & participantTactileData$stim2amplitude!=0] <- "Amplitude Discrimination Threshold without Adaptation"
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim2amplitude==100] <- "Amplitude Discrimination with Single Site Adaptation"
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim1amplitude==100] <- "Amplitude Discrimination with Dual Site Adaptation"
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim1amplitude==200] <- "Dual Staircase Amplitude Discrimination (up)"
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim2amplitude==200] <- "Dual Staircase Amplitude Discrimination (down)"
#Simultaneous and Sequential requency Discrimination
participantTactileData$protocolName[participantTactileData$protocol==920] <- "Simultaneous Frequency Discrimination"
participantTactileData$protocolName[participantTactileData$protocol==925] <- "Sequential Frequency Discrimination"
#Simultaneous and sequential Amplitude Discrimination
participantTactileData$protocolName[participantTactileData$protocol==105] <- "Simultaneous Amplitude Discrimination"
participantTactileData$protocolName[participantTactileData$protocol==100 & participantTactileData$stim1amplitude==100] <- "Sequential Amplitude Discrimination"
#Temporal Order Judgement with and without carrier
participantTactileData$protocolName[participantTactileData$protocol==930] <- "Temporal Order Judgement"
participantTactileData$protocolName[participantTactileData$protocol==931] <- "Temporal Order Judgement with Carrier"
#Duration Discrimination
participantTactileData$protocolName[participantTactileData$protocol==950] <- "Duration Discrimination"
#University of Calgary patch (temporary fix)
if(Site=="University of Calgary"){
participantTactileData$protocolName[participantTactileData$protocol==900] <- "Sequential Amplitude Discrimination"
participantTactileData$protocolName[participantTactileData$protocol==905] <- "Simultaneous Amplitude Discrimination"
}
#Accounting for session ----------------
#Where this code differs from the old format is that sessions are not accounted for within the same folder, but rather, are accounted for posthoc (i.e., after all the data for a given participant is  combined)
#In the old format, a participant who does the same session twice will have data stored in the same folder, whereas in the new format, this was not the case (at least at JHU/KKI)
#There are some cases where participants completed the same protocol twice, we need to be able to differentiate whether it was their first or second attempt
#The attempts are always in chronological order (again, at least at JHU and KKI)
#This code below is really inefficient, and was admittedly done in a hurry, this will be fixed in the next version update (nonetheless, it works)
Table <- as.data.frame(table(participantTactileData$protocolName))
Table <- Table[Table$Freq>25,] #Identify any of the protocols that have more than 25 trials (these must be protocols where the participant did it twice, since no protocol has more than 25 trials)
if(nrow(Table)>0){
ProtocolsAttemptedMoreThanOnce <- list()
for(i in 1:length(Table$Var1)){ #for all the protocols that were completed more than once
temp <- participantTactileData[participantTactileData$protocolName %in% Table$Var1,] #narrow dataframe to those completed more than once
temp <- temp[temp$protocolName==Table$Var1[i],] #split off the nth protocol that was completed more than once (denoted by "i)
sessions <- which(temp$trialNumber==1) #identify the start of the protocol (trial number one)
list <- list() #create an external list
for (s in 1:length(sessions)){ #for the given the number of attempts or 'sessions'
if(is.na(sessions[2])){
sessions[2] <- 1
}else{
triallength <- sessions[2] - sessions[1] #identify the trial length
}
tempo <- temp[sessions[s]:(sessions[s]+triallength),] #here it is just,
tempo <- as.data.frame(tempo)[1:triallength,] #convert to dataframe and remove last row (it's ane extra row, unsure why)
tempo$session <- s #label the session number as 's', which updates every loop
list[[s]] <- tempo #put the reduced and labelled session into a list
}
temp <- data.table::rbindlist(list) #row bind the list - adding all the sessions of the same protocol together
ProtocolsAttemptedMoreThanOnce[[i]] <- temp #put the rowbinded sessions into this list
}
moreThanOnce <- do.call(rbind.data.frame, ProtocolsAttemptedMoreThanOnce) #rowbind all the sessions that were completed more than once and save them as a dataframe
once <- participantTactileData[!participantTactileData$protocolName %in% Table$Var1,] #These are the protocols which have NOT been completed more than once
}
if(nrow(once)>1){once$session <- 1}
allProtocolOutputs <- as.data.frame(plyr::rbind.fill(moreThanOnce, once)) #combine sessions completed more than once with those completed just once
#Change performance column values to numeric ----
allProtocolOutputs <- suppressWarnings(as.data.frame(allProtocolOutputs))
allProtocolOutputs[,20:25] <- suppressWarnings(sapply(allProtocolOutputs[,20:25], suppressWarnings(as.character))) #supressWarnings is on because some values are already NA and then turn into NA
allProtocolOutputs[,20:25] <- suppressWarnings(sapply(allProtocolOutputs[,20:25], suppressWarnings(as.numeric)))
#Create column(s) to detail the extraction process ----
allProtocolOutputs$site <- Site
allProtocolOutputs$format <- "NF" #Specify that the format of the data is the old format
allProtocolOutputs$extractedBy <- "BATD V.1.3" #Specify that the data was extracted by BATD version V.X.X
#Save the extracted file for each participant in the output directory -----
print(paste("Extracting participant:", id))
currentDirectory <- getwd() #remember the current wd
setwd(outputDirectory) #setwd to the outputDirectory
write.csv(allProtocolOutputs, file = paste0("BATD_extracted_", list_of_filenames[p],"_NF.csv")) #save the output of all the protocols for each participant as a csv
setwd(currentDirectory) #return to the currentDirectory
allParticipantsOutput[[p]] <- as.data.frame(allProtocolOutputs)
}
allParticipantsOutput_combined <-  as.data.frame(data.table::rbindlist(allParticipantsOutput, fill = TRUE))
setwd(inputDirectory)
dir.create("combined", showWarnings = FALSE) #set the wd to the folder where you wish to save the combined data to
combinedDirectory <- paste0(inputDirectory,"/combined") #automatically creates a folder in that directory named 'output' - if you already have a folder named output, ignore this code.
setwd(combinedDirectory)
write.csv(allParticipantsOutput_combined, file = "BATD_extracted_combined.csv")
setwd(inputDirectory)
print(paste0("Combined extracted data saved in:", combinedDirectory))
return(allParticipantsOutput_combined)
}
#' BATD_analyze
#'
#' Analyze extracted data for from "BATD_extract_NF" or "BATD_extract_OF" for a single participant. This function only requires a dataframe containing the performance output of participants who have had their data extracted using either BATD_extract_NF or BATD_extract_OF.
#' BATD_analyze is used to analyze the datafrom a single participant. In order to analyze data from multiple participants, we recommend users use "BATD_analyze_all".
#'
#' @param dataframe refers to a dataframe produced from "BATD_extract_NF" or "BATD_extract_OF"
#'
#' @return BATD_analyze will return a dataframe with a single row, containing the performance metrics for all the protocols completed by a given participant.
#'
#' @examples
#' Examples are currently NA
#'
#' @export
BATD_analyze <- function(dataframe){
library(dplyr) #for some reason I can't call 'lead' or 'lag' without reading in the dplyr library
'%ni%' <- Negate('%in%') #create the function for %not in%
data <- dataframe
data <- data[!is.na(data$protocolName),]
protocolsCompleted <- as.character(unique(data$protocolName))
protocolsCompleted <- protocolsCompleted[!is.na(protocolsCompleted)]
#Extract participant details
id <- as.character(data$id[1])
race <- as.character(data$race[1])
gender <- as.character(data$gender[1])
handedness <- as.character(data$handedness[1])
birthYear <- as.character(data$birthYear[1])
participant_details <- cbind(id, race, gender, handedness, birthYear)
#Create external lists -----
analyzed_protocols_list <- list()
#For loops which subsets into the nth protocol completed for a given session ----
for(p in 1:length(protocolsCompleted)){
#Basic cleaning of dataframe ----
protocol <- protocolsCompleted[p]
protocolData <- data[data$protocolName==protocolsCompleted[p],] #Subset to relevant protocol
if(nrow(data)==0){
next
}
sessionData <- protocolData
sessionData <- sessionData[!is.na(sessionData$trialNumber),]
sessionData$responseTime <- as.numeric(as.character(sessionData$responseTime)) #turn responseTime to numeric
sessionData$correctResponse <- as.numeric(as.character(sessionData$correctResponse)) #turn correctResponse to numeric
sessionData$value <- as.numeric(as.character(sessionData$value)) #turn string variables into numeric
#General variables ----
medianRT <- median(sessionData$responseTime, na.rm = TRUE)
sdRT <- sd(sessionData$responseTime, na.rm = TRUE)
accuracy <- (sum(sessionData$correctResponse, na.rm = TRUE)/nrow(sessionData))*100
#Reversals ----
a <- sessionData$value
b <- lag(sessionData$value,1)
reversals <- as.data.frame(cbind(b,a))
colnames(reversals) <- c("valueprior", "value")
reversals$valuediff <- reversals$value-reversals$valueprior #value differnece
reversals$valuediffprior <- lead(reversals$valuediff,1)
reversals$sign <- sign(reversals$valuediff)
reversals$signs <- lead(sign(reversals$valuediff),1)
reversals$signs[reversals$signs==0] <- -1
reversals$reversals  <-reversals$sign+reversals$signs
reversals$reversals[reversals$reversals==0] <- "Reversals"
reversals <- length(which(reversals$reversals=="Reversals"))
#Key variables ----
#For the reaction time protocols
if(protocol %in% c("Simple Reaction Time","Choice Reaction Time")){
if(sum(sessionData$correctResponse) >= 6){
correctResponses <- sessionData$responseTime[sessionData$correctResponse==1]
middle <- length(correctResponses)/2
median6 <- correctResponses[(middle-3):(middle+2)]
meanRT <- mean(median6)
} else {
meanRT <- NA}}
#For the tactile threshold protocols
if(protocol %ni% c("Simple Reaction Time","Choice Reaction Time")){
threshold <- mean(sessionData$value[(nrow(sessionData)-4):(nrow(sessionData))])
}
if(protocol %in% c("Dynamic Detection Threshold")){
threshold <- mean(sessionData$value[sessionData$correctResponse==1])
}
#Column bind variables -----
if(protocol %in% c("Simple Reaction Time","Choice Reaction Time")){
outPut <- cbind(accuracy, medianRT, sdRT, meanRT)}else{outPut <- cbind(accuracy, medianRT, sdRT, threshold, reversals)}
#Add a tag to the end of the column names to specify which protocol the outPut is from ----
tag <- ifelse(protocol=="Simple Reaction Time", "_SRT",
ifelse(protocol=="Choice Reaction Time", "_CRT",
ifelse(protocol=="Static Detection Threshold", "_SDT",
ifelse(protocol=="Static Detection Threshold with Adaptation ISI 30", "_SDT30",
ifelse(protocol=="Static Detection Threshold with Adaptation ISI 100", "_SDT100",
ifelse(protocol=="Dynamic Detection Threshold", "_DDT",
ifelse(protocol=="Amplitude Discrimination Threshold without Adaptation", "_ADT",
ifelse(protocol=="Amplitude Discrimination with Single Site Adaptation", "_ADTssa",
ifelse(protocol=="Amplitude Discrimination with Dual Site Adaptation", "_ADTdsa",
ifelse(protocol=="Simultaneous Frequency Discrimination", "_SMFD",
ifelse(protocol=="Sequential Frequency Discrimination", "_SQFD",
ifelse(protocol=="Simultaneous Amplitude Discrimination", "_SMAD",
ifelse(protocol=="Sequential Amplitude Discrimination", "_SQAD",
ifelse(protocol=="Temporal Order Judgement", "_TOJ",
ifelse(protocol=="Temporal Order Judgement with Carrier", "_TOJwc",
ifelse(protocol=="Duration Discrimination", "_DD", NA))))))))))))))))
colnames(outPut) <- paste0(colnames(outPut), tag)
analyzed_protocols_list[[p]] <- outPut
}
participant_output <- do.call(cbind, analyzed_protocols_list)
participant_output <- cbind(participant_details, participant_output)
# participant_output$session <- 1:nrow(participant_output)
return(participant_output)
}
BATD_analyze_all(ARBA1)
temp <- BATD_analyze_all(ARBA1)
temp[temp$sessions==1]
temp[temp$sessions==1,]
temp[temp$sessions==2,]
#' BATD_analyze
#'
#' Analyze extracted data for from "BATD_extract_NF" or "BATD_extract_OF" for a single participant. This function only requires a dataframe containing the performance output of participants who have had their data extracted using either BATD_extract_NF or BATD_extract_OF.
#' BATD_analyze is used to analyze the datafrom a single participant. In order to analyze data from multiple participants, we recommend users use "BATD_analyze_all".
#'
#' @param dataframe refers to a dataframe produced from "BATD_extract_NF" or "BATD_extract_OF"
#'
#' @return BATD_analyze will return a dataframe with a single row, containing the performance metrics for all the protocols completed by a given participant.
#'
#' @examples
#' Examples are currently NA
#'
#' @export
BATD_analyze <- function(dataframe){
library(dplyr) #for some reason I can't call 'lead' or 'lag' without reading in the dplyr library
'%ni%' <- Negate('%in%') #create the function for %not in%
data <- dataframe
data <- data[!is.na(data$protocolName),]
protocolsCompleted <- as.character(unique(data$protocolName))
protocolsCompleted <- protocolsCompleted[!is.na(protocolsCompleted)]
#Extract participant details
id <- as.character(data$id[1])
race <- as.character(data$race[1])
gender <- as.character(data$gender[1])
handedness <- as.character(data$handedness[1])
birthYear <- as.character(data$birthYear[1])
participant_details <- cbind(id, race, gender, handedness, birthYear)
#Create external lists -----
analyzed_protocols_list <- list()
#For loops which subsets into the nth protocol completed for a given session ----
for(p in 1:length(protocolsCompleted)){
#Basic cleaning of dataframe ----
protocol <- protocolsCompleted[p]
protocolData <- data[data$protocolName==protocolsCompleted[p],] #Subset to relevant protocol
if(nrow(data)==0){
next
}
sessionData <- protocolData
sessionData <- sessionData[!is.na(sessionData$trialNumber),]
sessionData$responseTime <- as.numeric(as.character(sessionData$responseTime)) #turn responseTime to numeric
sessionData$correctResponse <- as.numeric(as.character(sessionData$correctResponse)) #turn correctResponse to numeric
sessionData$value <- as.numeric(as.character(sessionData$value)) #turn string variables into numeric
#General variables ----
medianRT <- median(sessionData$responseTime, na.rm = TRUE)
sdRT <- sd(sessionData$responseTime, na.rm = TRUE)
accuracy <- (sum(sessionData$correctResponse, na.rm = TRUE)/nrow(sessionData))*100
#Reversals ----
a <- sessionData$value
b <- lag(sessionData$value,1)
reversals <- as.data.frame(cbind(b,a))
colnames(reversals) <- c("valueprior", "value")
reversals$valuediff <- reversals$value-reversals$valueprior #value differnece
reversals$valuediffprior <- lead(reversals$valuediff,1)
reversals$sign <- sign(reversals$valuediff)
reversals$signs <- lead(sign(reversals$valuediff),1)
reversals$signs[reversals$signs==0] <- -1
reversals$reversals  <-reversals$sign+reversals$signs
reversals$reversals[reversals$reversals==0] <- "Reversals"
reversals <- length(which(reversals$reversals=="Reversals"))
#Key variables ----
#For the reaction time protocols
if(protocol %in% c("Simple Reaction Time","Choice Reaction Time")){
if(sum(sessionData$correctResponse) >= 6){
correctResponses <- sessionData$responseTime[sessionData$correctResponse==1]
middle <- length(correctResponses)/2
median6 <- correctResponses[(middle-3):(middle+2)]
meanRT <- mean(median6)
} else {
meanRT <- NA}}
#For the tactile threshold protocols
if(protocol %ni% c("Simple Reaction Time","Choice Reaction Time")){
threshold <- mean(sessionData$value[(nrow(sessionData)-4):(nrow(sessionData))])
}
if(protocol %in% c("Dynamic Detection Threshold")){
threshold <- mean(sessionData$value[sessionData$correctResponse==1])
}
#Column bind variables -----
if(protocol %in% c("Simple Reaction Time","Choice Reaction Time")){
outPut <- cbind(accuracy, medianRT, sdRT, meanRT)}else{outPut <- cbind(accuracy, medianRT, sdRT, threshold, reversals)}
#Add a tag to the end of the column names to specify which protocol the outPut is from ----
tag <- ifelse(protocol=="Simple Reaction Time", "_SRT",
ifelse(protocol=="Choice Reaction Time", "_CRT",
ifelse(protocol=="Static Detection Threshold", "_SDT",
ifelse(protocol=="Static Detection Threshold with Adaptation ISI 30", "_SDT30",
ifelse(protocol=="Static Detection Threshold with Adaptation ISI 100", "_SDT100",
ifelse(protocol=="Dynamic Detection Threshold", "_DDT",
ifelse(protocol=="Amplitude Discrimination Threshold without Adaptation", "_ADT",
ifelse(protocol=="Amplitude Discrimination with Single Site Adaptation", "_ADTssa",
ifelse(protocol=="Amplitude Discrimination with Dual Site Adaptation", "_ADTdsa",
ifelse(protocol=="Simultaneous Frequency Discrimination", "_SMFD",
ifelse(protocol=="Sequential Frequency Discrimination", "_SQFD",
ifelse(protocol=="Simultaneous Amplitude Discrimination", "_SMAD",
ifelse(protocol=="Sequential Amplitude Discrimination", "_SQAD",
ifelse(protocol=="Temporal Order Judgement", "_TOJ",
ifelse(protocol=="Temporal Order Judgement with Carrier", "_TOJwc",
ifelse(protocol=="Duration Discrimination", "_DD", NA))))))))))))))))
colnames(outPut) <- paste0(colnames(outPut), tag)
analyzed_protocols_list[[p]] <- outPut
}
participant_output <- do.call(cbind, analyzed_protocols_list)
participant_output <- cbind(participant_details, participant_output)
return(participant_output)
}
library(BATD)

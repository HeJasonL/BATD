"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_thresholds <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_thresholds,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
}
response_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=responseTime, color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = expression("Response Times"), x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept= Analyzed_data$medianRT , linetype = "dashed") #Note that this needs to be estimated as mean RT
#Text plots ----
plot_text_SRT_CRT <- paste("Mean RT:", round(as.numeric(Analyzed_data$meanRT), digits = 2), "\n", "\n",
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_SRT_CRT <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_SRT_CRT,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
#Combine plots for a given protocol ----
#if the protocols are not simple or choice reaction time, then plot the value_plot and response_plot
if(Data$protocolName[1] %ni% c("Simple Reaction Time","Choice Reaction Time")){
value_plot <- ggpubr::ggarrange(value_plot, response_plot, ncol = 1, nrow = 2)
plots_combined <- ggpubr::ggarrange(value_plot, text_plot_thresholds, ncol = 2, nrow = 1)}
#if the protocols are simple and choice reaction time, then plot the response_plot and text_plot_SRT_CRT plot
if(Data$protocolName[1] %in% c("Simple Reaction Time","Choice Reaction Time")){
plots_combined <- ggpubr::ggarrange(response_plot, text_plot_SRT_CRT, ncol = 1, nrow = 2)}
annotated_plots <- ggpubr::annotate_figure(plots_combined,
top = ggpubr::text_grob(Data$protocolName[1],
color = "black", face = "bold", size = 12))
plots_of_protocols_completed[[completed]] <- annotated_plots
}
names(plots_of_protocols_completed)
name(plots_of_protocols_completed)
plots_of_protocols_completed
annotated_plots
for(completed in protocols_completed){
Data <- temp[temp$protocolName==completed,] #Reset the Data to the relevant protocol
Analyzed_data <- BATD_analyze(Data) #BATD_analyze the data to get the performance metrics
colnames(Analyzed_data) <- gsub("_.*", "",colnames(Analyzed_data)) #strip the tags (makes universally consistent across protocols)
#if the current protocol are the tactile threshold protocols:
if(completed %ni% c("Simple Reaction Time","Choice Reaction Time")){
#Value and response plots ----
value_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=value, color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = expression("Amplitude"~(mu*m)), x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept = Analyzed_data$threshold) #Note that this needs to be estimated as threshold
plot_text_thresholds <- paste("\n","Threshold:", round(as.numeric(Analyzed_data$threshold),digits = 2),"\n",
"Reversals:", Analyzed_data$reversals, "\n",
"\n", "\n", "\n", "\n", "\n", "\n", #Breaks up the top and bottom of the texts (could do two separate plots but not efficient)
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_thresholds <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_thresholds,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
}
response_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=responseTime, color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = expression("Response Times"), x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept= Analyzed_data$medianRT , linetype = "dashed") #Note that this needs to be estimated as mean RT
#Text plots ----
plot_text_SRT_CRT <- paste("Mean RT:", round(as.numeric(Analyzed_data$meanRT), digits = 2), "\n", "\n",
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_SRT_CRT <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_SRT_CRT,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
#Combine plots for a given protocol ----
#if the protocols are not simple or choice reaction time, then plot the value_plot and response_plot
if(Data$protocolName[1] %ni% c("Simple Reaction Time","Choice Reaction Time")){
value_plot <- ggpubr::ggarrange(value_plot, response_plot, ncol = 1, nrow = 2)
plots_combined <- ggpubr::ggarrange(value_plot, text_plot_thresholds, ncol = 2, nrow = 1)}
#if the protocols are simple and choice reaction time, then plot the response_plot and text_plot_SRT_CRT plot
if(Data$protocolName[1] %in% c("Simple Reaction Time","Choice Reaction Time")){
plots_combined <- ggpubr::ggarrange(response_plot, text_plot_SRT_CRT, ncol = 1, nrow = 2)}
annotated_plots <- ggpubr::annotate_figure(plots_combined,
top = ggpubr::text_grob(Data$protocolName[1],
color = "black", face = "bold", size = 12))
plots_of_protocols_completed[[completed]] <- annotated_plots
}
plots_of_protocols_completed
completed
data <- NF
baseDirectory <- getwd()
dir.create("Plots", showWarnings = FALSE) #Creates a directory to put the combined .csv file into
setwd(paste0(baseDirectory,"/Plots")) #Switch to a folder to save the plots
s <- 1
for(s in 1:length(sessions)){
temp <- data[data$session==sessions[s],] #Specify to the session
protocols_completed <- unique(temp$protocolName) #List the protocols completed
plots_of_protocols_completed <- list() #Create a list for the plots of protocols completed to be put in
#For loop across protocols completed by a given participant ----
for(completed in protocols_completed){
Data <- temp[temp$protocolName==completed,] #Reset the Data to the relevant protocol
Analyzed_data <- BATD_analyze(Data) #BATD_analyze the data to get the performance metrics
colnames(Analyzed_data) <- gsub("_.*", "",colnames(Analyzed_data)) #strip the tags (makes universally consistent across protocols)
#if the current protocol are the tactile threshold protocols:
if(completed %ni% c("Simple Reaction Time","Choice Reaction Time")){
#Value and response plots ----
value_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=value, color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = expression("Amplitude"~(mu*m)), x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept = Analyzed_data$threshold) #Note that this needs to be estimated as threshold
plot_text_thresholds <- paste("\n","Threshold:", round(as.numeric(Analyzed_data$threshold),digits = 2),"\n",
"Reversals:", Analyzed_data$reversals, "\n",
"\n", "\n", "\n", "\n", "\n", "\n", #Breaks up the top and bottom of the texts (could do two separate plots but not efficient)
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_thresholds <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_thresholds,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
}
response_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=responseTime, color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = expression("Response Times"), x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept= Analyzed_data$medianRT , linetype = "dashed") #Note that this needs to be estimated as mean RT
#Text plots ----
plot_text_SRT_CRT <- paste("Mean RT:", round(as.numeric(Analyzed_data$meanRT), digits = 2), "\n", "\n",
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_SRT_CRT <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_SRT_CRT,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
#Combine plots for a given protocol ----
#if the protocols are not simple or choice reaction time, then plot the value_plot and response_plot
if(Data$protocolName[1] %ni% c("Simple Reaction Time","Choice Reaction Time")){
value_plot <- ggpubr::ggarrange(value_plot, response_plot, ncol = 1, nrow = 2)
plots_combined <- ggpubr::ggarrange(value_plot, text_plot_thresholds, ncol = 2, nrow = 1)}
#if the protocols are simple and choice reaction time, then plot the response_plot and text_plot_SRT_CRT plot
if(Data$protocolName[1] %in% c("Simple Reaction Time","Choice Reaction Time")){
plots_combined <- ggpubr::ggarrange(response_plot, text_plot_SRT_CRT, ncol = 1, nrow = 2)}
annotated_plots <- ggpubr::annotate_figure(plots_combined,
top = ggpubr::text_grob(Data$protocolName[1],
color = "black", face = "bold", size = 12))
plots_of_protocols_completed[[completed]] <- annotated_plots
}
protocols_completed
temp <- data[data$session==sessions[s],] #Specify to the session
protocols_completed <- unique(temp$protocolName) #List the protocols completed
plots_of_protocols_completed <- list() #Create a list for the plots of protocols completed to be put in
protocols_completed <- unique(temp$protocolName) #List the protocols completed
protocols_completed
for(completed in protocols_completed){
Data <- temp[temp$protocolName==completed,] #Reset the Data to the relevant protocol
Analyzed_data <- BATD_analyze(Data) #BATD_analyze the data to get the performance metrics
colnames(Analyzed_data) <- gsub("_.*", "",colnames(Analyzed_data)) #strip the tags (makes universally consistent across protocols)
#if the current protocol are the tactile threshold protocols:
if(completed %ni% c("Simple Reaction Time","Choice Reaction Time")){
#Value and response plots ----
value_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=value, color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = expression("Amplitude"~(mu*m)), x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept = Analyzed_data$threshold) #Note that this needs to be estimated as threshold
plot_text_thresholds <- paste("\n","Threshold:", round(as.numeric(Analyzed_data$threshold),digits = 2),"\n",
"Reversals:", Analyzed_data$reversals, "\n",
"\n", "\n", "\n", "\n", "\n", "\n", #Breaks up the top and bottom of the texts (could do two separate plots but not efficient)
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_thresholds <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_thresholds,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
}
response_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=responseTime, color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = expression("Response Times"), x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept= Analyzed_data$medianRT , linetype = "dashed") #Note that this needs to be estimated as mean RT
#Text plots ----
plot_text_SRT_CRT <- paste("Mean RT:", round(as.numeric(Analyzed_data$meanRT), digits = 2), "\n", "\n",
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_SRT_CRT <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_SRT_CRT,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
#Combine plots for a given protocol ----
#if the protocols are not simple or choice reaction time, then plot the value_plot and response_plot
if(Data$protocolName[1] %ni% c("Simple Reaction Time","Choice Reaction Time")){
value_plot <- ggpubr::ggarrange(value_plot, response_plot, ncol = 1, nrow = 2)
plots_combined <- ggpubr::ggarrange(value_plot, text_plot_thresholds, ncol = 2, nrow = 1)}
#if the protocols are simple and choice reaction time, then plot the response_plot and text_plot_SRT_CRT plot
if(Data$protocolName[1] %in% c("Simple Reaction Time","Choice Reaction Time")){
plots_combined <- ggpubr::ggarrange(response_plot, text_plot_SRT_CRT, ncol = 1, nrow = 2)}
annotated_plots <- ggpubr::annotate_figure(plots_combined,
top = ggpubr::text_grob(Data$protocolName[1],
color = "black", face = "bold", size = 12))
plots_of_protocols_completed[[completed]] <- annotated_plots
}
plots_of_protocols_completed
names(plots_of_protocols_completed)
names(plots_of_protocols_completed) %in% c("Simple Reaction Time","Choice Reaction Time"))
names(plots_of_protocols_completed) %in% c("Simple Reaction Time","Choice Reaction Time")
names(plots_of_protocols_completed) %in% c("Simple Reaction Time","Choice Reaction Time")
plots_of_protocols_completed
names(plots_of_protocols_completed)
if(c("Simple Reaction Time","Choice Reaction Time") %in% names(plots_of_protocols_completed)){
print("YES")
}
if("Simple Reaction Time" & "Choice Reaction Time") %in% names(plots_of_protocols_completed)){
print("YES")
}
if("Simple Reaction Time" & "Choice Reaction Time" %in% names(plots_of_protocols_completed)){
print("YES")
}
if(c("Simple Reaction Time", "Choice Reaction Time") %in% names(plots_of_protocols_completed)){
print("YES")
}
"Simple Reaction Time" %in% names(plots_of_protocols_completed
"Simple Reaction Time" %in% names(plots_of_protocols_completed
c("Simple Reaction Time") %in% names(plots_of_protocols_completed
c("Simple Reaction Time") %in% names(plots_of_protocols_completed)
if( c("Simple Reaction Time") %in% names(plots_of_protocols_completed) & c("Simple Reaction Time") %in% names(plots_of_protocols_completed)){
print("YES")
}
SRT_plot <- plots_of_protocols_completed$`Simple Reaction Time`
CRT_plot <- plots_of_protocols_completed$`Simple Reaction Time`
Data
BATD_plot_all(NF) #New format
library(BATD)
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze_all(NF) #New format
BATD_plot_all(NF) #New format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI")
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
## STEP 1: BATD_extract for both old and new formats ----
#Old Format
setwd("")#setwd to the folder containing all the raw .txt files
participants_OF_list <- list.files(pattern = "-") #list the txt files containing participant's performance
OF <- BATD_extract_OF(participants_OF_list[1:2], "KKI") #run BATD_extract_XX and assign the output to a dataframe
BATD_analyze_all(OF)
#New Format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1:3], "KKI") #run BATD_extract_XX and assign the output to a dataframe
BATD_analyze_all(NF)
BATD_plot_all(NF) #New format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI")
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI")
## STEP 1: BATD_extract for both old and new formats ----
#Old Format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI")#setwd to the folder containing all the raw .txt files
participants_OF_list <- list.files(pattern = "-") #list the txt files containing participant's performance
OF <- BATD_extract_OF(participants_OF_list[1:2], "KKI") #run BATD_extract_XX and assign the output to a dataframe
## STEP 1: BATD_extract for both old and new formats ----
#Old Format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI")#setwd to the folder containing all the raw .txt files
## STEP 1: BATD_extract for both old and new formats ----
#Old Format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/Old Format/KKI")#setwd to the folder containing all the raw .txt files
participants_OF_list <- list.files(pattern = "-") #list the txt files containing participant's performance
OF <- BATD_extract_OF(participants_OF_list[1:2], "KKI") #run BATD_extract_XX and assign the output to a dataframe
BATD_analyze_all(OF)
BATD_plot_all(OF) #New format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze_all(NF) #New format
BATD_plot_all(NF) #New format
BATD_plot(NF)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze_all(NF) #New format
BATD_plot_all(NF) #New format
BATD_plot(NF)
BATD_analyze_all(NF) #New format
BATD_analyze(NF)
NF
NF$numberofPracticeTrials
library(BATD)
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze()
BATD_plot_all(NF) #New format
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze()
BATD_plot_all(NF) #New format
library(BATD)
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze()
BATD_plot_all(NF) #New format
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
library(BATD)
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze(NF)
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
library(BATD)
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
sessionData$numberofPracticeTrials[1]
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
numberofPracticeTrials <- as.numeric(as.character(sessionData$numberofPracticeTrials[1]))
library(BATD)
BATD_analyze(NF)
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
library(BATD)
library(BATD)
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
library(BATD)
library(BATD)
BATD_analyze(NF)
library(BATD)
BATD_analyze(NF)
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze(NF)
BATD_plot_all(NF) #New format
library(BATD)
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze(NF)
BATD_plot(NF)
#New Format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1:3], "KKI") #run BATD_extract_XX and assign the output to a dataframe
BATD_analyze_all(NF)
NF$id
BATD_plot_all(NF$id==1905-1227)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
BATD_analyze_all(NF)
BATD_plot_(NF) #New format
BATD_plot(NF) #New format
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze(NF)
BATD_plot_all(NF)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/Old Format/KKI")#setwd to the folder containing all the raw .txt files
participants_OF_list <- list.files(pattern = "-") #list the txt files containing participant's performance
OF <- BATD_extract_OF(participants_OF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
BATD_analyze_all(OF)
BATD_plot_all(OF) #New format
BATD_plot_all(NF) #New format
library(BATD)
BATD_plot_all(NF) #New format
#New Format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
BATD_analyze_all(NF)
NF
NF$correctResponse
library(BATD)
library(BATD)
#New Format
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign
library(BATD)
etwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
etwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
NF$correctResponse
library(BATD)
NF$correctResponse
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
library(BATD)
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/KKI") #setwd to the folder containing all the folders which contain participant's performance
participants_NF_list <- list.files(pattern = "*.txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list[1], "KKI") #run BATD_extract_XX and assign the output to a dataframe
NF$correctResponse
BATD_analyze_all(NF)
BATD_plot_all(NF$id==1905-1227)
BATD_plot(NF) #New format
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze(NF)
BATD_plot_all(NF)
#Attempt to use the package on Toronto data ----
setwd("~/Dropbox/Documents/Data repository/Tactile Data/Raw/New Format/Calgary")
participants_NF_list <- list.files(pattern = ".txt") #list the txt files containing participant's performance
NF <- BATD_extract_NF(participants_NF_list, "University of Calgary")
BATD_analyze(NF)
BATD_plot_all(NF)
library(BATD)

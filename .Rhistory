}
#If site is the SPIN site, read from this location
if(site %in% c("CARE")){
url <- paste0("https://raw.githubusercontent.com/HeJasonL/BATD/master/Site%20specific%20protocols/",
site, "/", #folder name
site, "_protocol_names.csv") #file name
}
protocol_names <- read.csv(url, header = TRUE)
protocols_completed <- unique(participantTactileData$protocol)
list_of_labelled_protocols <- list()
for(pc in protocols_completed){
data_for_current_protocol_number <- participantTactileData[participantTactileData$protocol==pc,]
data_for_current_protocol_number$protocolName <- protocol_names$protocol_string_label[protocol_names$protocol_number==pc][1]
list_of_labelled_protocols[[pc]] <- data_for_current_protocol_number
}
#recombine the labelled protocol data
participantTactileData <- dplyr::bind_rows(list_of_labelled_protocols)
#Adjust for site customization
if(site == "KKI"){
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim2amplitude==100 & participantTactileData$astim1amplitude==0] <- "Amplitude Discrimination with Single Site Adaptation"
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim1amplitude==100] <- "Amplitude Discrimination with Dual Site Adaptation"
participantTactileData$protocolName[participantTactileData$protocol==910 & participantTactileData$interval_between_adaptive_and_test==30] <- "Static Detection Threshold with Adaptation ISI 30"
participantTactileData$protocolName[participantTactileData$protocol==910 & participantTactileData$interval_between_adaptive_and_test==100] <- "Static Detection Threshold with Adaptation ISI 100"
}
if(site == "CCH"){
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim2amplitude==100] <- "Amplitude Discrimination with Single Site Adaptation"
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim1amplitude==100] <- "Amplitude Discrimination with Dual Site Adaptation"
participantTactileData$protocolName[participantTactileData$protocol==910 & participantTactileData$ISI==30] <- "Static Detection Threshold with Adaptation ISI 30"
participantTactileData$protocolName[participantTactileData$protocol==910 & participantTactileData$ISI==100] <- "Static Detection Threshold with Adaptation ISI 100"
}
if(site %in% c("ARBA1", "ARBA2", "ARBA3", "ARBA4")){
participantTactileData$protocolName[participantTactileData$protocol==100 & participantTactileData$stim1amplitude==0] <- "Static Detection Threshold"
participantTactileData$protocolName[participantTactileData$protocol==100 &  participantTactileData$stim1amplitude==100] <- "Sequential Amplitude Discrimination"
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim2amplitude==0] <- "Dual Staircase Amplitude Discrimination (up)"
participantTactileData$protocolName[participantTactileData$protocol==171 & participantTactileData$astim2amplitude==200] <- "Dual Staircase Amplitude Discrimination (down)"
}
if(site %in% c("SPIN")){
participantTactileData$protocolName[participantTactileData$protocol==100 & participantTactileData$stim1amplitude==0] <- "Static Detection Threshold"
participantTactileData$protocolName[participantTactileData$protocol==100 &  participantTactileData$stim1amplitude==100] <- "Simultaneous Amplitude Discrimination"
participantTactileData$protocolName[participantTactileData$protocol==171] <- "Dual Staircase Amplitude Discrimination (down)" #Reminder, need to figure out whether 171 is truly Dual Staircase Amp down
}
# Section 1.7 -------------------------------------------------------------
#Store the protocol outputs in the allParticipantsOutput list
allParticipantsOutput[[p]] <- as.data.frame(participantTactileData)
}
allParticipantsOutput_combined <-  as.data.frame(data.table::rbindlist(allParticipantsOutput, fill = TRUE)) #combine the output into a unitary dataframe
allParticipantsOutput_combined$protocol[is.na(allParticipantsOutput_combined$protocolName)]
# Section 2 ---------------------------------------------------------------
#Accounting for runs
#Annotation pending
list_for_runs <- list()
participants <- unique(allParticipantsOutput_combined$id)
for(p in 1:length(participants)){
current_p <- allParticipantsOutput_combined[allParticipantsOutput_combined$id==participants[p],]
sessions <- unique(current_p$session)
for(s in 1:length(sessions)){
current_s <- current_p[current_p$session==sessions[s],]
times <- unique(current_s$time)
protocols_completed_in_session <- list()
for(t in 1:length(times)){
current_t <- current_p[current_p$time==times[t],] #subset to current unique timepoint
protocols_completed_in_session <- append(protocols_completed_in_session, current_t$protocolName[1]) #add the protocol completed to the protocols_completed_in_session list
repeats <- sum(protocols_completed_in_session==current_t$protocolName[1]) #calculate number of repeats of this protocol
if(repeats > 1){ #if there are more than 1 repeats of the current protocol, then repeat the value of the repeats by nrow of the current trial
t_repeated <- rep(repeats, times = nrow(current_t))
} else {
t_repeated <- rep(1, times = nrow(current_t)) #otherwise, just repeat the value 1 by nrow of the current trial
}
list_for_runs <- append(list_for_runs, t_repeated)
}
}
}
allParticipantsOutput_combined$run <- unlist(list_for_runs)
#Changing variables to the right format
allParticipantsOutput_combined <- suppressWarnings(data.frame(lapply(allParticipantsOutput_combined, as.character), stringsAsFactors=FALSE))
allParticipantsOutput_combined[9:25] <- sapply(allParticipantsOutput_combined[9:25], as.numeric)
allParticipantsOutput_combined[29:30] <- sapply(allParticipantsOutput_combined[29:30], as.numeric)
allParticipantsOutput_combined[30] <- sapply(allParticipantsOutput_combined[30], as.numeric)
allParticipantsOutput_combined$numberofPracticeTrials[is.na(allParticipantsOutput_combined$numberofPracticeTrials)] <- 0
# Section 3 ---------------------------------------------------------------
#Saving the combined dataframe
# setwd(inputDirectory)
# dir.create("combined", showWarnings = FALSE) #set the wd to the folder where you wish to save the combined data to
# combinedDirectory <- paste0(inputDirectory,"/combined") #automatically creates a folder in that directory named 'output' - if you already have a folder named output, ignore this code.
# setwd(combinedDirectory)
# write.csv(combined_participant_data_after_accounting_for_runs, file = "BATD_extracted_combined.csv")
# setwd(inputDirectory)
# print(paste0("Combined extracted data saved in:", combinedDirectory))
# if(debugging=="on"){print("(Succesfully completed SECTION 3: Combined data saved")}
allParticipantsOutput_combined$Site <- site
return(allParticipantsOutput_combined)
}
setwd("~/OneDrive - King's College London/Documents/Projects/TAC_LUR/TAC-LUR/data/CARE") #setwd to where the CARE data are
CARE_raw_data <- list.files(pattern = ".txt")
newFormat_CARE <- BATD_extract_NF(CARE_raw_data, "CARE") #extract the data (note that site is not KKI, but a folder for CARE does not exist)
#' BATD_plot
#'
#' Plot extracted data for from BATD_extract_NF or BATD_extract_OF for a single participant. This function only requires a dataframe containing the performance output of participants who have had their data extracted using either BATD_extract_NF or BATD_extract_OF.
#' BATD_plot is used to analyze the datafrom a single participant. In order to analyze data from multiple participants, we recommend users use BATD_plot_all.
#'
#' @param data referring to the dataframe extracted from BATD_extract_NF and BATD_extract_OF
#'
#' @return BATD plot does not return any plots in the R environment. Instead, BATD_plot creates a folder called plot in the users working directory, and saves a series of plots with the filename pattern of id_session_X.pdf, with id being the participant id and X being the session.
#'
#' @examples
#' Examples are currently NA
#'
#' @export
BATD_plot <- function(data){
##Version
Version <- c("BATD_V.1.6")
#DEBUGGING ----
debugging <- "off"
if(debugging=="on"){
# print("Note: Debugging on")
data <- sessionData_for_given_run
}
#Set themes and functions ----
theme_JH = ggplot2::theme(
text = ggplot2::element_text(size = 12, family = "Helvetica"),
plot.tag = ggplot2::element_text(size = 20, face = "bold"),
axis.title.x = ggplot2::element_text(size = 10),#, margin = unit(c(1, 0, 0, 0), "mm")),
axis.title.y = ggplot2::element_text(size = 10, margin = ggplot2::unit(c(0, 1, 0, 0), "mm")),
axis.text = ggplot2::element_text(size = 8),
axis.text.x = ggplot2::element_text(angle = 0, vjust = 0, color = "black"),
legend.title = ggplot2::element_text(size=16),
legend.text = ggplot2::element_text(size=16),
legend.position = "none",
plot.title = ggplot2::element_text(lineheight=.8, face= "bold", size = 16),
panel.border = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_blank(),
panel.background = ggplot2::element_blank(),
axis.line = ggplot2::element_line(color = "black"),
axis.ticks = ggplot2::element_line(colour = "black"))
cols <- c("0" = "red", "1" = "royalblue", "-" = "gray") #0's are incorrect, coded as red, and 1's are correct, coded as blue
'%ni%' <- Negate('%in%') #create the function for %not in%
#Setup -----
data_to_plot <- data
data_to_plot <- data_to_plot[!is.na(data_to_plot$protocolName),]
protocols_completed <- as.character(unique(data_to_plot$protocolName)) #identy the protocols completed
sessions <- unique(data_to_plot$session) #Identifies the number of sessions completed outside of the loop
plots_of_protocols_completed <- list() #Create a list for the plots of protocols completed to be put in
plots_of_protocols_by_session <- list() #creates a list for the plots by session to go in
#For loop across protocols completed by a given participant ----
for(completed in protocols_completed){
Data <- data[data_to_plot$protocolName==completed,] #Reset the Data to the relevant protocol
Analyzed_data <- BATD_analyze(Data) #BATD_analyze the data to get the performance metrics
colnames(Analyzed_data) <- gsub("_.*", "",colnames(Analyzed_data)) #strip the tags (makes universally consistent across protocols)
#Temporary fix for the removal of practice trials
Data <- Data[!is.na(Data$trialNumber),] #First, remove any rows where there are more trial numbers than you would reasonably expect
numberofPracticeTrials <- as.numeric(as.character(Data$numberofPracticeTrials[1])) + 1 #adding one so that the trials start AFTER the n of practice trials
#here we remove the practice trials if the n > 10, this is because some sites actually ran a whole protocol as a practice, rather than the first n-numnber of trials (usually 3)
#If prctice trials were ran as a whole protocol, thye are just treated as a protocol
if(numberofPracticeTrials < 9 ){
Data <- Data[numberofPracticeTrials:nrow(Data),] #remove practice trials
Data$trialNumber <- 1:nrow(Data) #reset trial numbers
}
#if the current protocol are the tactile threshold protocols:
if(completed %ni% c("Simple Reaction Time","Choice Reaction Time")){
#Value and response plots ----
if(completed %in% c("Simultaneous Amplitude Discrimination",
"Sequential Amplitude Discrimination",
"Dual Staircase Amplitude Discrimination (up)",
"Dual Staircase Amplitude Discrimination (down)",
"Amplitude Discrimination with Single Site Adaptation",
"Amplitude Discrimination with Dual Site Adaptation")){#NOTE TO SELF: ADD NOTES
Data$value <- as.numeric(Data$value) - 100
}
if(grepl("Duration Discrimination", completed)){#NOTE TO SELF: ADD NOTES
Data$value <- Data$value - 500
}
value_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=value, color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = "Value", x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept = Analyzed_data$threshold) #Note that this needs to be estimated as threshold
plot_text_thresholds <- paste("\n","Threshold:", round(Analyzed_data$threshold, digits = 2),"\n",
"Reversals:", Analyzed_data$reversals, "\n",
"\n", "\n", "\n", "\n", "\n", "\n", #Breaks up the top and bottom of the texts (could do two separate plots but not efficient)
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_thresholds <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_thresholds,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
}
response_plot <- ggplot2::ggplot(Data, ggplot2::aes(x=trialNumber, y=as.numeric(as.character(responseTime)), color = as.factor(correctResponse))) +
ggplot2::geom_point(size =3) + ggplot2::scale_colour_manual(values = cols) + theme_JH +
ggplot2::labs(y = expression("Response Times"), x = "Trial Number") + #note that this needs to be estimated
ggplot2::geom_hline(yintercept= Analyzed_data$medianRT , linetype = "dashed") #Note that this needs to be estimated as mean RT
#Text plots ----
plot_text_SRT_CRT <- paste("Mean RT:", round(as.numeric(Analyzed_data$meanRT), digits = 2), "\n", "\n",
"Median RT:", round(Analyzed_data$medianRT, digits = 2), "\n",
"Accuracy:", round(Analyzed_data$accuracy, digits = 2), "% \n", "\n")
text_plot_SRT_CRT <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::annotate("text", x = 4, y = 20, label = plot_text_SRT_CRT,) +
ggplot2::theme(panel.grid.major=ggplot2::element_blank(),
panel.grid.minor=ggplot2::element_blank(),
panel.border=ggplot2::element_blank(),
axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank(),
axis.title = ggplot2::element_blank())
#Combine plots for a given protocol ----
#if the protocols are not simple or choice reaction time, then plot the value_plot and response_plot
if(Data$protocolName[1] %ni% c("Simple Reaction Time","Choice Reaction Time")){
value_plot <- ggpubr::ggarrange(value_plot, response_plot, ncol = 1, nrow = 2)
plots_combined <- ggpubr::ggarrange(value_plot, text_plot_thresholds, ncol = 2, nrow = 1)}
#if the protocols are simple and choice reaction time, then plot the response_plot and text_plot_SRT_CRT plot
if(Data$protocolName[1] %in% c("Simple Reaction Time","Choice Reaction Time")){
plots_combined <- ggpubr::ggarrange(response_plot, text_plot_SRT_CRT, ncol = 1, nrow = 2)}
annotated_plots <- ggpubr::annotate_figure(plots_combined,
top = ggpubr::text_grob(Data$protocolName[1],
color = "black", face = "bold", size = 12))
plots_of_protocols_completed[[completed]] <- annotated_plots
}
if(data$site[1]=="University of Calgary"){
plots_of_protocols_completed <- rev(plots_of_protocols_completed)
}
all_plots_combined <- ggpubr::ggarrange(plotlist=plots_of_protocols_completed,#There are many ways to do this,
widths = c(1,1),  #but here you can arrange all the plots from the list you put plots in earlier
common.legend = FALSE, #common legend
ncol = 4,
nrow = 3,
align = "hv")
return(all_plots_combined)
}
#' BATD_plot_all
#'
#' Plot the extracted data from "BATD_extract_NF" or "BATD_extract_OF" for multiple participants. This function is practically the same as BATD_analyze, but applies it to multiple participants within a for loop.
#' We recommend users to always use "BATD_plot_all", even for single participants.
#'
#' @param x Numeric vector.
#'
#' @return Factor variable.
#'
#' @examples
#'
#' @export
BATD_plot_all <- function(extracted_Data){
##Version
Version <- c("BATD_V.1.6")
#DEBUGGING ----
debugging <- "off"
if(debugging=="on"){
setwd(here("data"))
extracted_Data <-participant_data
}
#Setup ----
baseDirectory <- getwd()
dir.create("Plots", showWarnings = FALSE) #Creates a directory to put the combined .csv file into
setwd(paste0(baseDirectory,"/Plots")) #Switch to a folder to save the plots
extracted_Data <- extracted_Data[!is.na(extracted_Data$id),]
extracted_Data <- extracted_Data[!is.na(extracted_Data$protocolName),]
uniqueParticipants <- unique(extracted_Data$id)
uniqueParticipants <- uniqueParticipants[!is.na(uniqueParticipants)]
participants_outPut_list <- list()
for(x in 1:length(uniqueParticipants)){
print(paste0("Now plotting participant:", uniqueParticipants[x]))
data <- extracted_Data[extracted_Data$id==uniqueParticipants[x],]
uniqueSessions <- sort(unique(data$session)) #identify the number of unique sessions
list_of_all_plots_for_a_given_session <- list()
for(s in uniqueSessions){
sessionData <- data[data$session==s,]
#identify the number of unique runs
uniqueRuns <- unique(sessionData$run)
list_of_all_plots_for_a_given_run <- list()
for(r in 1:length(uniqueRuns)){
r <- 1
sessionData_for_given_run <- sessionData[sessionData$run==uniqueRuns[r],]
plot <- BATD_plot(sessionData_for_given_run)
plot_with_run_header <- ggpubr::annotate_figure(plot, top = ggpubr::text_grob(paste0("Run: ", uniqueRuns[r]), color = "black", face = "italic", size = 15))
plot_with_session_header <- ggpubr::annotate_figure(plot_with_run_header, top = ggpubr::text_grob(paste0("Participant: ", uniqueParticipants[x], "; Session: ", uniqueSessions[s], " (", sessionData$date, ")"), color = "black", face = "italic", size = 15))
plot_with_all_headers <- ggpubr::annotate_figure(plot_with_session_header, top = ggpubr::text_grob("Batch Analysis of Tactile Data (BATD)", color = "black", face = "bold", size = 20))
list_of_all_plots_for_a_given_run[[r]] <- plot_with_all_headers
}#end of runs loop
list_of_all_plots_for_a_given_session[[s]] <- list_of_all_plots_for_a_given_run
}#end of sessions loop
pdf(paste0(uniqueParticipants[x],".pdf"), onefile = TRUE, width = 20, height = 12)
print(list_of_all_plots_for_a_given_session)
dev.off()
} #end of participants loop
setwd(baseDirectory)
}
#' BATD_analyze
#'
#' Analyze extracted data for from "BATD_extract_NF" or "BATD_extract_OF" for a single participant. This function only requires a dataframe containing the performance output of participants who have had their data extracted using either BATD_extract_NF or BATD_extract_OF.
#' BATD_analyze is used to analyze the datafrom a single participant. In order to analyze data from multiple participants, we recommend users use "BATD_analyze_all".
#'
#' @param dataframe refers to a dataframe produced from "BATD_extract_NF" or "BATD_extract_OF"
#'
#' @return BATD_analyze will return a dataframe with a single row, containing the performance metrics for all the protocols completed by a given participant.
#'
#' @examples
#' Examples are currently NA
#'
#' @export
BATD_analyze <- function(dataframe){
##VERSION ----
Version <- c("BATD_V.1.7")
#DEBUGGING ----
debugging <- "off"
if(debugging=="on"){
print("Note: Debugging on")
dataframe <- extracted_participants_NJI[extracted_participants_NJI$id=="stes-1006",]
}
# Setup -------------------------------------------------------------------
'%ni%' <- Negate('%in%') #create the function for %not in%
library(dplyr) #for some reason I can't call 'lead' or 'lag' without reading in the dplyr library
dataframe <- dataframe #redundant code but useful for debugging (ignore)
unique_number_of_runs <- unique(dataframe$run) #identify the unique number of runs completed
list_of_protocols_by_run <- list()
for(r in unique_number_of_runs){
#Subset the data by the run and analyze the data
data <- dataframe[dataframe$run==r,] #Subset to the current run
protocolsCompleted <- as.character(unique(data$protocolName)) #identify the number of protocols completed
protocolsCompleted <- protocolsCompleted[!is.na(protocolsCompleted)] #legacy: remove any NAs (haven't tested without this line yet)
## SECTION 2 (extract the participant and protocol details) ----
# ___ 1.1 Participant Details -----------------------------------------------------
id <- as.character(data$id[1])
race <- as.character(data$race[1])
gender <- as.character(data$gender[1])
handedness <- as.character(data$handedness[1])
birthYear <- as.character(data$birthYear[1])
participant_details <- cbind(id, race, gender, handedness, birthYear)
# ___ 1.2 Protocol Details --------------------------------------------------------
dateTested <- as.character(dataframe$date[1])
extractedBy <- as.character(dataframe$extractedBy[1])
run <- r
site <- data$Site[1]
protocolDetails <- cbind(dateTested, extractedBy, site, run)
## SECTION 2 (Analyze each of the protocols completed identified in SECTION 1)----
analyzed_protocols_list <- list()  # Create an external list to put the analyzed protocols
for(p in 1:length(protocolsCompleted)){  #For loops which subsets into the nth protocol completed for a given session
#Basic cleaning of dataframe ----
protocol <- protocolsCompleted[p] #state the current protocol (legacy: haven't tried running without this yet)
protocolData <- data[data$protocolName==protocolsCompleted[p],] #Subset to relevant protocol
if(nrow(protocolData) < 1){next} #(legacy)
sessionData <- protocolData
#Change performance column values to numeric ----
sessionData <- sessionData[!is.na(sessionData$trialNumber),] #remove any trials without a trial number (legacy)
sessionData$responseTime <- as.numeric(as.character(sessionData$responseTime)) #turn responseTime to numeric
sessionData$correctResponse <- as.numeric(as.character(sessionData$correctResponse)) #turn correctResponse to numeric
sessionData$value <- as.numeric(as.character(sessionData$value)) #turn string variables into numeric
numberofPracticeTrials <- as.numeric(as.character(sessionData$numberofPracticeTrials[1]))
#adding one so that the trials start AFTER the n of practice trials
if(numberofPracticeTrials > 1){
numberofPracticeTrials <- numberofPracticeTrials + 1
}
#here we remove the practice trials if the n > 10, this is because some sites actually ran a whole protocol as a practice, rather than the first number of trials (usually 3)
#If practice trials were ran as a whole protocol, thye are just treated as a protocol
if(numberofPracticeTrials < 9){
sessionData <- sessionData[numberofPracticeTrials:nrow(sessionData),] #remove practice trials
sessionData$trialNumber <- 1:nrow(sessionData) #reset trial numbers
}
sessionData_for_thresholds <- sessionData
sessionData <- sessionData[!is.na(sessionData$response),] #some protocols had a last trial where a response was not made, this response is not included (CONSIDER MAKING THIS BASED ON SITE)
#General variables ----
medianRT <- median(sessionData$responseTime, na.rm = TRUE)
sdRT <- sd(sessionData$responseTime, na.rm = TRUE)
accuracy <- (sum(sessionData$correctResponse, na.rm = TRUE)/nrow(sessionData))*100
#Reversals ----
a <- sessionData$value
b <- lag(sessionData$value,1)
reversals <- as.data.frame(cbind(b,a))
colnames(reversals) <- c("valueprior", "value")
reversals$valuediff <- reversals$value-reversals$valueprior #value difference
reversals$valuediffprior <- lead(reversals$valuediff,1)
reversals$sign <- sign(reversals$valuediff)
reversals$signs <- lead(sign(reversals$valuediff),1)
reversals$signs[reversals$signs==0] <- -1
reversals$reversals  <-reversals$sign+reversals$signs
reversals$reversals[reversals$reversals==0] <- "Reversals"
reversals <- length(which(reversals$reversals=="Reversals"))
#Key variables ----
#For the reaction time protocols
if(protocol %in% c("Simple Reaction Time","Choice Reaction Time")){
if(sum(sessionData$correctResponse) >= 6){
correctResponses <- sessionData$responseTime[sessionData$correctResponse==1]
middle <- length(correctResponses)/2
median6 <- correctResponses[(middle-3):(middle+2)]
meanRT <- mean(median6)
} else {
meanRT <- NA}}
#For the tactile threshold protocols
#Estimate Threshold
if(protocol %ni% c("Simple Reaction Time","Choice Reaction Time")){
sessionData <- sessionData_for_thresholds
if(nrow(sessionData) > 5){
threshold <- mean(sessionData$value[(nrow(sessionData)-4):(nrow(sessionData))])
}else{
threshold <- NA
}
}
#Estimate Threshold for dynamic detection threshold (done differently)
if (protocol %in% c(
"Dynamic Detection Threshold",
"Dynamic Detection Threshold (up)",
"Dynamic Detection Threshold (down)"
)) {
sessionData <- sessionData_for_thresholds
threshold <- mean(sessionData$value[sessionData$correctResponse == 1])
}
#Else, if it is an amplitude discrimination protocol
if(protocol %in% c("Simultaneous Amplitude Discrimination",
"Sequential Amplitude Discrimination",
"Dual Staircase Amplitude Discrimination (up)",
"Dual Staircase Amplitude Discrimination (down)",
"Amplitude Discrimination with Single Site Adaptation",
"Amplitude Discrimination with Dual Site Adaptation",
"Sequential Amplitude Challenge"
)){
threshold <- threshold - 100 #remove the standard stimulus from threshold
}
#If frequency discrimination protocol
# if(protocol %in% c(
#   "Simultaneous Frequency Discrimination",
#   "Sequential Frequency Discrimination"
# )){
#   threshold <- threshold - 30 #remove the standard stimulus from threshold
# }
#If duration discrimination protocol
if(protocol %in% c("Duration Discrimination")){
threshold <- threshold - 500
}
#If protocol is SSA 2 Block from the STES experiments at KCL, we need to re-estimate everything because there should be two sets of thresholds (before and after adaptation),
if(protocol %in% c("SSA 2 Block")){
sessionDataOne <- sessionData[1:24,]
sessionDataTwo <- sessionData[25:nrow(sessionData),]
sessionDataX_list <- list()
for(x in 1:2){
#if x == 1, then set sessionDataX to be the first half of the protocol
if(x == 1){
sessionDataX <- sessionDataOne
}
# else, set it to be the second half of the protocol
if(x == 2){
sessionDataX <- sessionDataTwo
}
#estimate medianRT, sdRT and accuracy for the given sessionDataX
medianRT <- median(sessionDataX$responseTime, na.rm = TRUE)
sdRT <- sd(sessionDataX$responseTime, na.rm = TRUE)
accuracy <- (sum(sessionDataX$correctResponse, na.rm = TRUE)/nrow(sessionData))*100
#estimate reversals for given sessionDataX
a <- sessionDataX$value
b <- lag(sessionDataX$value,1)
reversals <- as.data.frame(cbind(b,a))
colnames(reversals) <- c("valueprior", "value")
reversals$valuediff <- reversals$value-reversals$valueprior #value difference
reversals$valuediffprior <- lead(reversals$valuediff,1)
reversals$sign <- sign(reversals$valuediff)
reversals$signs <- lead(sign(reversals$valuediff),1)
reversals$signs[reversals$signs==0] <- -1
reversals$reversals  <-reversals$sign+reversals$signs
reversals$reversals[reversals$reversals==0] <- "Reversals"
reversals <- length(which(reversals$reversals=="Reversals"))
#estimate thresholds for given sessionDataX
threshold <- mean(sessionDataX$value[(nrow(sessionDataX)-4):(nrow(sessionDataX))]) - 100 #note 100 being subtracted
sessionDataX_list[[x]] <- cbind(medianRT, sdRT, accuracy, reversals, threshold)
}
#combine and add tags to each session
sessionDataOne_output <- as.data.frame(sessionDataX_list[[1]])
colnames(sessionDataOne_output) <- paste0(colnames(sessionDataOne_output), "_SSA2_pt1")
sessionDataTwo_output <- as.data.frame(sessionDataX_list[[2]])
colnames(sessionDataTwo_output) <- paste0(colnames(sessionDataTwo_output), "_SSA2_pt2")
}
#Column bind variables -----
if(protocol %in% c("Simple Reaction Time","Choice Reaction Time")){
outPut <- cbind(accuracy, medianRT, sdRT, meanRT)}else{outPut <- cbind(accuracy, medianRT, sdRT, threshold, reversals)}
#Add a tag to the end of the column names to specify which protocol the outPut is from ----
tag <- ifelse(protocol=="Simple Reaction Time", "_SRT",
ifelse(protocol=="Choice Reaction Time", "_CRT",
ifelse(protocol=="Static Detection Threshold", "_SDT",
ifelse(protocol=="Static Detection Threshold with Adaptation ISI 30", "_SDT30",
ifelse(protocol=="Static Detection Threshold with Adaptation ISI 100", "_SDT100",
ifelse(protocol=="Dynamic Detection Threshold", "_DDT",
ifelse(protocol=="Amplitude Discrimination Threshold without Adaptation", "_ADT",
ifelse(protocol=="Amplitude Discrimination with Single Site Adaptation", "_ADTssa",
ifelse(protocol=="Amplitude Discrimination with Dual Site Adaptation", "_ADTdsa",
ifelse(protocol=="Dual Staircase Amplitude Discrimination (up)", "_ADTdsa_up",
ifelse(protocol=="Dual Staircase Amplitude Discrimination (down)", "_ADTdsa_down",
ifelse(protocol=="Simultaneous Frequency Discrimination", "_SMFD",
ifelse(protocol=="Sequential Frequency Discrimination", "_SQFD",
ifelse(protocol=="Simultaneous Amplitude Discrimination", "_SMAD",
ifelse(protocol=="Sequential Amplitude Discrimination", "_SQAD",
ifelse(protocol=="Temporal Order Judgement", "_TOJ",
ifelse(protocol=="Temporal Order Judgement with Carrier", "_TOJwc",
ifelse(protocol=="Duration Discrimination", "_DD",
ifelse(protocol=="Dynamic Detection Threshold (up)", "_DDTup",
ifelse(protocol=="Dynamic Detection Threshold (down)", "_DDTdown",
ifelse(protocol=="Sequential Amplitude Challenge", "_SQAD",NA)))))))))))))))))))))
colnames(outPut) <- paste0(colnames(outPut), tag)
if(protocol %in% c("SSA 2 Block")){
outPut <- cbind(sessionDataOne_output, sessionDataTwo_output)
}
analyzed_protocols_list[[p]] <- outPut
}
participant_output <- do.call(cbind, analyzed_protocols_list)
#Convert the analyzed data to numeric ----
participant_output <- suppressWarnings(as.data.frame(participant_output))
participant_output[,1:ncol(participant_output)] <- suppressWarnings(sapply(participant_output[,1:ncol(participant_output)], suppressWarnings(as.character)))
participant_output[,1:ncol(participant_output)] <- suppressWarnings(sapply(participant_output[,1:ncol(participant_output)], suppressWarnings(as.numeric)))
#Append additional details ----
participant_output <- cbind(participant_details, protocolDetails, participant_output)
list_of_protocols_by_run[[r]] <- participant_output
}
participant_output <- plyr::rbind.fill(list_of_protocols_by_run)
return(participant_output)
}
